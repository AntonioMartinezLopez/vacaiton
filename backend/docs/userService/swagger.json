{
    "swagger": "2.0",
    "info": {
        "description": "Swagger authentication is set to oauth to make login easier",
        "title": "User/Auth API",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "Vacaition API Support",
            "url": "http://www.swagger.io/support",
            "email": "support@swagger.io"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "1.0"
    },
    "basePath": "/userservice/api",
    "paths": {
        "/auth": {
            "get": {
                "security": [
                    {
                        "OAuth2Application": [
                            "write",
                            "admin"
                        ]
                    }
                ],
                "description": "This Endpoint is used to check token in cookie header. The JWT token is additionally being refreshed.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Check Token validity",
                "operationId": "check-token",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.AuthResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "$ref": "#/definitions/jsonHelper.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Invalid input: Invalid password",
                        "schema": {
                            "$ref": "#/definitions/jsonHelper.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Invalid input: User not found",
                        "schema": {
                            "$ref": "#/definitions/jsonHelper.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Invalid input: User Already exists",
                        "schema": {
                            "$ref": "#/definitions/jsonHelper.HTTPError"
                        }
                    }
                }
            }
        },
        "/auth/login": {
            "post": {
                "description": "This Endpoint is used to sign in a specific user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Sign in of an user",
                "operationId": "login-user",
                "parameters": [
                    {
                        "description": "User Input for login",
                        "name": "loginUserInput",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.SignInUserInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.AuthResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "$ref": "#/definitions/jsonHelper.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Invalid input: Invalid password",
                        "schema": {
                            "$ref": "#/definitions/jsonHelper.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Invalid input: User not found",
                        "schema": {
                            "$ref": "#/definitions/jsonHelper.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Invalid input: User Already exists",
                        "schema": {
                            "$ref": "#/definitions/jsonHelper.HTTPError"
                        }
                    }
                }
            }
        },
        "/auth/logout": {
            "get": {
                "security": [
                    {
                        "OAuth2Application": [
                            "write",
                            "admin"
                        ]
                    }
                ],
                "description": "This Endpoint is used to logout a specific user and delete the corresponding session cookie",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Log out of an user",
                "operationId": "logut-user",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.AuthResponse"
                        }
                    }
                }
            }
        },
        "/auth/signup": {
            "post": {
                "description": "Register and create a new user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Create a new user",
                "operationId": "create-user",
                "parameters": [
                    {
                        "description": "User Input for creating a new user",
                        "name": "newUserInput",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.RegisterUserInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.RegisterUserOutput"
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "$ref": "#/definitions/jsonHelper.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Invalid input: User Already exists",
                        "schema": {
                            "$ref": "#/definitions/jsonHelper.HTTPError"
                        }
                    }
                }
            }
        },
        "/auth/user": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Get user info (for registered users)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Get user related data",
                "operationId": "get-user-info",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    },
                    "400": {
                        "description": "We need ID!!",
                        "schema": {
                            "$ref": "#/definitions/jsonHelper.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Can not find ID",
                        "schema": {
                            "$ref": "#/definitions/jsonHelper.HTTPError"
                        }
                    }
                }
            }
        },
        "/oauth": {
            "get": {
                "description": "This Endpoint is used to login user via google oauth provider - this endpoint triggers the process and redirects to the google authentication service",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "OAuth"
                ],
                "summary": "Initiates login process using google oauth",
                "operationId": "login-oauth",
                "parameters": [
                    {
                        "type": "string",
                        "default": "google",
                        "description": "oauth provider",
                        "name": "provider",
                        "in": "query"
                    }
                ],
                "responses": {}
            }
        },
        "/oauth/logout": {
            "get": {
                "description": "This Endpoint is used to login user via google oauth provider - this endpoint triggers the process and redirects to the google authentication service",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "text/html"
                ],
                "tags": [
                    "OAuth"
                ],
                "summary": "Logout process using google oauth",
                "operationId": "logoaut-oauth",
                "responses": {}
            }
        }
    },
    "definitions": {
        "jsonHelper.HTTPError": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 400
                },
                "message": {
                    "type": "string",
                    "example": "status bad request"
                }
            }
        },
        "models.AuthResponse": {
            "type": "object",
            "required": [
                "status"
            ],
            "properties": {
                "status": {
                    "$ref": "#/definitions/models.LoginStatus"
                }
            }
        },
        "models.LoginStatus": {
            "type": "integer",
            "enum": [
                1,
                2
            ],
            "x-enum-varnames": [
                "LoggedIn",
                "LoggedOut"
            ]
        },
        "models.RegisterUserInput": {
            "type": "object",
            "required": [
                "email",
                "firstname",
                "lastname",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "example": "testuser@test.de"
                },
                "firstname": {
                    "type": "string",
                    "example": "testuser"
                },
                "lastname": {
                    "type": "string",
                    "example": "testuser"
                },
                "password": {
                    "type": "string",
                    "example": "test"
                }
            }
        },
        "models.RegisterUserOutput": {
            "type": "object",
            "required": [
                "userId"
            ],
            "properties": {
                "userId": {
                    "type": "integer",
                    "example": 1
                }
            }
        },
        "models.SignInUserInput": {
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "example": "testuser@test.de"
                },
                "password": {
                    "type": "string",
                    "example": "test"
                }
            }
        },
        "models.User": {
            "type": "object",
            "required": [
                "email",
                "firstname",
                "lastname"
            ],
            "properties": {
                "created_at": {
                    "type": "string",
                    "example": "2023-12-01T12:37:59.008583Z"
                },
                "email": {
                    "type": "string",
                    "example": "testuser"
                },
                "firstname": {
                    "type": "string",
                    "example": "testuser"
                },
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "lastname": {
                    "type": "string",
                    "example": "testuser"
                },
                "updated_at_at": {
                    "type": "string",
                    "example": "2023-12-01T12:37:59.008583Z"
                }
            }
        }
    },
    "securityDefinitions": {
        "OAuth2Application": {
            "type": "oauth2",
            "flow": "implicit",
            "authorizationUrl": "http://localhost:8080/userservice/api/oauth?provider=google",
            "scopes": {
                "admin": "\t\t\t\t\t\t\tGrants read and write access to administrative information",
                "write": "\t\t\t\t\t\t\tGrants write access"
            }
        }
    }
}