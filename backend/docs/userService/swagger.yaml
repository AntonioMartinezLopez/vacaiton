basePath: /userservice/api
definitions:
  jsonHelper.HTTPError:
    properties:
      code:
        example: 400
        type: integer
      message:
        example: status bad request
        type: string
    type: object
  models.AuthResponse:
    properties:
      status:
        $ref: '#/definitions/models.LoginStatus'
    required:
    - status
    type: object
  models.LoginStatus:
    enum:
    - 1
    - 2
    type: integer
    x-enum-varnames:
    - LoggedIn
    - LoggedOut
  models.RegisterUserInput:
    properties:
      email:
        example: testuser@test.de
        type: string
      firstname:
        example: testuser
        type: string
      lastname:
        example: testuser
        type: string
      password:
        example: test
        type: string
    required:
    - email
    - firstname
    - lastname
    - password
    type: object
  models.RegisterUserOutput:
    properties:
      userId:
        example: 1
        type: integer
    required:
    - userId
    type: object
  models.SignInUserInput:
    properties:
      email:
        example: testuser@test.de
        type: string
      password:
        example: test
        type: string
    required:
    - email
    - password
    type: object
  models.User:
    properties:
      created_at:
        example: "2023-12-01T12:37:59.008583Z"
        type: string
      email:
        example: testuser
        type: string
      firstname:
        example: testuser
        type: string
      id:
        example: 1
        type: integer
      lastname:
        example: testuser
        type: string
      updated_at_at:
        example: "2023-12-01T12:37:59.008583Z"
        type: string
    required:
    - email
    - firstname
    - lastname
    type: object
info:
  contact:
    email: support@swagger.io
    name: Vacaition API Support
    url: http://www.swagger.io/support
  description: Swagger authentication is set to oauth to make login easier
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: User/Auth API
  version: "1.0"
paths:
  /auth:
    get:
      consumes:
      - application/json
      description: This Endpoint is used to check token in cookie header. The JWT
        token is additionally being refreshed.
      operationId: check-token
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.AuthResponse'
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/jsonHelper.HTTPError'
        "401":
          description: 'Invalid input: Invalid password'
          schema:
            $ref: '#/definitions/jsonHelper.HTTPError'
        "404":
          description: 'Invalid input: User not found'
          schema:
            $ref: '#/definitions/jsonHelper.HTTPError'
        "500":
          description: 'Invalid input: User Already exists'
          schema:
            $ref: '#/definitions/jsonHelper.HTTPError'
      security:
      - OAuth2Application:
        - write
        - admin
      summary: Check Token validity
      tags:
      - Auth
  /auth/login:
    post:
      consumes:
      - application/json
      description: This Endpoint is used to sign in a specific user
      operationId: login-user
      parameters:
      - description: User Input for login
        in: body
        name: loginUserInput
        required: true
        schema:
          $ref: '#/definitions/models.SignInUserInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.AuthResponse'
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/jsonHelper.HTTPError'
        "401":
          description: 'Invalid input: Invalid password'
          schema:
            $ref: '#/definitions/jsonHelper.HTTPError'
        "404":
          description: 'Invalid input: User not found'
          schema:
            $ref: '#/definitions/jsonHelper.HTTPError'
        "500":
          description: 'Invalid input: User Already exists'
          schema:
            $ref: '#/definitions/jsonHelper.HTTPError'
      summary: Sign in of an user
      tags:
      - Auth
  /auth/logout:
    get:
      consumes:
      - application/json
      description: This Endpoint is used to logout a specific user and delete the
        corresponding session cookie
      operationId: logut-user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.AuthResponse'
      security:
      - OAuth2Application:
        - write
        - admin
      summary: Log out of an user
      tags:
      - Auth
  /auth/signup:
    post:
      consumes:
      - application/json
      description: Register and create a new user
      operationId: create-user
      parameters:
      - description: User Input for creating a new user
        in: body
        name: newUserInput
        required: true
        schema:
          $ref: '#/definitions/models.RegisterUserInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.RegisterUserOutput'
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/jsonHelper.HTTPError'
        "500":
          description: 'Invalid input: User Already exists'
          schema:
            $ref: '#/definitions/jsonHelper.HTTPError'
      summary: Create a new user
      tags:
      - Auth
  /auth/user:
    get:
      consumes:
      - application/json
      description: Get user info (for registered users)
      operationId: get-user-info
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: We need ID!!
          schema:
            $ref: '#/definitions/jsonHelper.HTTPError'
        "404":
          description: Can not find ID
          schema:
            $ref: '#/definitions/jsonHelper.HTTPError'
      security:
      - ApiKeyAuth: []
      summary: Get user related data
      tags:
      - Auth
  /oauth:
    get:
      consumes:
      - application/json
      description: This Endpoint is used to login user via google oauth provider -
        this endpoint triggers the process and redirects to the google authentication
        service
      operationId: login-oauth
      parameters:
      - default: google
        description: oauth provider
        in: query
        name: provider
        type: string
      produces:
      - application/json
      responses: {}
      summary: Initiates login process using google oauth
      tags:
      - OAuth
  /oauth/logout:
    get:
      consumes:
      - application/json
      description: This Endpoint is used to login user via google oauth provider -
        this endpoint triggers the process and redirects to the google authentication
        service
      operationId: logoaut-oauth
      produces:
      - text/html
      responses: {}
      summary: Logout process using google oauth
      tags:
      - OAuth
securityDefinitions:
  OAuth2Application:
    authorizationUrl: http://localhost:8080/userservice/api/oauth?provider=google
    flow: implicit
    scopes:
      admin: "\t\t\t\t\t\t\tGrants read and write access to administrative information"
      write: "\t\t\t\t\t\t\tGrants write access"
    type: oauth2
swagger: "2.0"
