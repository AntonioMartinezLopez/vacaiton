basePath: /tripservice/api
definitions:
  jsonHelper.HTTPError:
    properties:
      code:
        type: integer
      message:
        type: string
    type: object
  models.CreateTripQueryInput:
    properties:
      country:
        example: Germany
        type: string
      duration:
        example: 10
        type: integer
      focus:
        enum:
        - Cities
        - Nature
        - Mixed
        example: Mixed
        type: string
      maximum_distance:
        example: 100
        type: integer
      secrets:
        example: true
        type: boolean
    required:
    - country
    - duration
    - focus
    - maximum_distance
    - secrets
    type: object
  models.StopHighlight:
    properties:
      created_at:
        example: "2023-12-01T12:37:59.008583Z"
        type: string
      description:
        example: The landmark of Berlin
        type: string
      id:
        example: 1
        type: integer
      latitude:
        example: 13.404954
        type: number
      longitude:
        example: 52.520008
        type: number
      name:
        example: Brandenburger Tor
        type: string
      stop_id:
        type: integer
      updated_at_at:
        example: "2023-12-01T12:37:59.008583Z"
        type: string
    type: object
  models.Trip:
    properties:
      created_at:
        example: "2023-12-01T12:37:59.008583Z"
        type: string
      id:
        example: 1
        type: integer
      query:
        $ref: '#/definitions/models.TripQuery'
      stops:
        items:
          $ref: '#/definitions/models.TripStop'
        type: array
      updated_at_at:
        example: "2023-12-01T12:37:59.008583Z"
        type: string
      user_id:
        example: "1"
        type: string
    type: object
  models.TripQuery:
    properties:
      country:
        example: Germany
        type: string
      created_at:
        example: "2023-12-01T12:37:59.008583Z"
        type: string
      duration:
        example: 10
        type: integer
      focus:
        enum:
        - Cities
        - Nature
        - Mixed
        example: Mixed
        type: string
      id:
        example: 1
        type: integer
      maximum_distance:
        example: 1000
        type: integer
      secrets:
        type: boolean
      updated_at_at:
        example: "2023-12-01T12:37:59.008583Z"
        type: string
    type: object
  models.TripStop:
    properties:
      created_at:
        example: "2023-12-01T12:37:59.008583Z"
        type: string
      days:
        type: integer
      highlights:
        items:
          $ref: '#/definitions/models.StopHighlight'
        type: array
      id:
        example: 1
        type: integer
      latitude:
        example: 13.404954
        type: number
      longitude:
        example: 52.520008
        type: number
      stopName:
        example: Berlin
        type: string
      trip_id:
        type: integer
      updated_at_at:
        example: "2023-12-01T12:37:59.008583Z"
        type: string
    type: object
  models.UpdateTripQueryInput:
    properties:
      country:
        example: Germany
        type: string
      duration:
        example: 10
        type: integer
      focus:
        enum:
        - Cities
        - Nature
        - Mixed
        example: Mixed
        type: string
      id:
        example: 1
        type: integer
      maximum_distance:
        example: 1000
        type: integer
      secrets:
        example: true
        type: boolean
    required:
    - country
    - duration
    - focus
    - id
    - maximum_distance
    - secrets
    type: object
info:
  contact:
    email: support@swagger.io
    name: Vacaition API Support
    url: http://www.swagger.io/support
  description: This server is used for creating new trips
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Trip API
  version: "1.0"
paths:
  /trip:
    post:
      consumes:
      - application/json
      description: 'This endpoint can be used to create a trip. Requirements: authenticated'
      operationId: create-trip
      parameters:
      - description: User Input creating a new trip
        in: body
        name: createTripInput
        required: true
        schema:
          $ref: '#/definitions/models.CreateTripQueryInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Trip'
        "400":
          description: In case of invalid createTrip DTO
          schema:
            $ref: '#/definitions/jsonHelper.HTTPError'
        "401":
          description: In case of unauthenticated request
          schema:
            $ref: '#/definitions/jsonHelper.HTTPError'
        "500":
          description: In case of persistence error
          schema:
            $ref: '#/definitions/jsonHelper.HTTPError'
      security:
      - ApiKeyAuth: []
      summary: Create a new trip
      tags:
      - Trip
  /trip/{id}:
    delete:
      consumes:
      - application/json
      description: 'This endpoint can be used delete a trip including its stops. Requirements:
        authenticated'
      operationId: delete-trip
      parameters:
      - description: Trip ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Trip'
        "400":
          description: In case of missing path param
          schema:
            $ref: '#/definitions/jsonHelper.HTTPError'
        "401":
          description: "In case of unauthenticated\trequest"
          schema:
            $ref: '#/definitions/jsonHelper.HTTPError'
        "500":
          description: "In case of persistence\terror"
          schema:
            $ref: '#/definitions/jsonHelper.HTTPError'
      security:
      - ApiKeyAuth: []
      summary: Delete a trip
      tags:
      - Trip
    get:
      consumes:
      - application/json
      description: 'This endpoint is used to query a trip. Requirements: authenticated
        and requested trip is assigned to user'
      operationId: get-trip
      parameters:
      - description: Trip ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Trip'
        "400":
          description: In case of missing path param
          schema:
            $ref: '#/definitions/jsonHelper.HTTPError'
        "401":
          description: In case of unauthenticated request
          schema:
            $ref: '#/definitions/jsonHelper.HTTPError'
        "404":
          description: In case non existing trip for given user
          schema:
            $ref: '#/definitions/jsonHelper.HTTPError'
        "500":
          description: "In case of\tpersistence error"
          schema:
            $ref: '#/definitions/jsonHelper.HTTPError'
      security:
      - ApiKeyAuth: []
      summary: Get trip
      tags:
      - Trip
    put:
      consumes:
      - application/json
      description: 'This endpoint can be used update a trip. This action deletes existing
        stops and initiates a new calculation. Requirements: authenticated'
      operationId: update-trip
      parameters:
      - description: User Input for updating a trip
        in: body
        name: updateTripInput
        required: true
        schema:
          $ref: '#/definitions/models.UpdateTripQueryInput'
      - description: Trip ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Trip'
        "400":
          description: "In\tcase of invalid updateTrip DTO or missing path param"
          schema:
            $ref: '#/definitions/jsonHelper.HTTPError'
        "401":
          description: "In\tcase of unauthenticated\trequest"
          schema:
            $ref: '#/definitions/jsonHelper.HTTPError'
        "500":
          description: "In\tcase of persistence\terror"
          schema:
            $ref: '#/definitions/jsonHelper.HTTPError'
      security:
      - ApiKeyAuth: []
      summary: Update a trip
      tags:
      - Trip
  /trips:
    get:
      consumes:
      - application/json
      description: 'This endpoint is used to query all trips of a given user. Requirements:
        authenticated and requested trip is assigned to user'
      operationId: get-trips
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Trip'
            type: array
        "401":
          description: "In\tcase of\tunauthenticated\trequest"
          schema:
            $ref: '#/definitions/jsonHelper.HTTPError'
        "404":
          description: "In\tcase non existing trip for given user"
          schema:
            $ref: '#/definitions/jsonHelper.HTTPError'
        "500":
          description: "In\tcase of\tpersistence error"
          schema:
            $ref: '#/definitions/jsonHelper.HTTPError'
      security:
      - ApiKeyAuth: []
      summary: Get all trips
      tags:
      - Trip
securityDefinitions:
  OAuth2Application:
    authorizationUrl: http://localhost:8080/userservice/api/oauth?provider=google
    flow: implicit
    scopes:
      admin: "\t\t\t\t\t\t\tGrants read and write access to administrative information"
      write: "\t\t\t\t\t\t\tGrants write access"
    type: oauth2
swagger: "2.0"
