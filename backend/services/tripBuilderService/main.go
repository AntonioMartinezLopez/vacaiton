package main

import (

	// docs is generated by Swag CLI, you have to import it.

	"backend/pkg/events"
	"backend/pkg/logger"
	"backend/services/tripBuilderService/config"
	"os"
	"os/signal"
	"syscall"
	"time"

	"github.com/nats-io/nats.go"
)

func forever() {
	for {
		//fmt.Printf("%v+\n", time.Now())
		time.Sleep(time.Second)
	}
}

func main() {

	// Check configuration and for all env variables
	if _, configError := config.SetupConfig(); configError != nil {
		logger.Fatal(configError.Error())
	}

	natsConnector, err := events.NewNatsConnector("nats1")
	if err != nil {
		logger.Error(err.Error())
	}

	_, streamError := natsConnector.CreateStream("TRIPSTREAM", []string{"TRIP_CREATED", "TRIP_CALCULATED"})

	if streamError != nil {
		logger.Error(streamError.Error())
	}

	natsConnector.QueueSubscribe("FOO", "TRIP_CREATED", "testgroup", func(m *nats.Msg) {
		logger.Log("Message: " + string(m.Data))
	})

	// go forever()

	quitChannel := make(chan os.Signal, 1)
	signal.Notify(quitChannel, syscall.SIGINT, syscall.SIGTERM)
	<-quitChannel
	//time for cleanup before exit
	logger.Info("Shutting down.")

}
