version: "3.8"
services:
  ### reverse proxy ###
  nginx:
    image: nginx:latest
    ports:
      - 8080:8080
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
  ### frontend ####
  # client:
  #   image: node:current-alpine3.17
  #   container_name: client
  #   command: npm run dev
  #   working_dir: /var/app/client
  #   volumes:
  #     - ./client:/var/app/client
  #   ports:
  #     - 3000:3000
  ### backend ###
  # backend:
  #   image: node:current-alpine3.17
  #   container_name: backend
  #   command: npm run start:dev
  #   working_dir: /var/app/backend
  #   volumes:
  #     - ./vacaiton-api:/var/app/backend
  #   environment:
  #     EXPOSE_PORT: 5000
  #     DATABASE_HOST: db
  #     DATABASE_PORT: 5432
  #     DATABASE_NAME: vacaiton
  #     DATABASE_USER: root
  #     DATABASE_PASSWORD: root
  userservice:
    container_name: userService
    build:
      context: ./backend/services/userService
      dockerfile: Dockerfile.dev
    # ports:
    #   - 5000:5000
    volumes:
      - ./backend:/app
    environment:
      USERSERVICE_PORT: 80
      USERSERVICE_SECRET: gf37d2c!_edezb2
      USERSERVICE_DB_HOST: db
      USERSERVICE_DB_NAME: userdata
      USERSERVICE_DB_USER: userservice
      USERSERVICE_DB_PASSWORD: userservice
      USERSERVICE_OAUTH_GOOGLE_ID: ${OAUTH_GOOGLE_ID}
      USERSERVICE_OAUTH_GOOGLE_KEY: ${OAUTH_GOOGLE_KEY}
    restart: always
  tripservice:
    container_name: tripService
    build:
      context: ./backend/services/tripService
      dockerfile: Dockerfile.dev
    # ports:
    #   - 5000:5000
    volumes:
      - ./backend:/app
    environment:
      USERSERVICE_PORT: 80
      USERSERVICE_SECRET: gf37d2c!_edezb2
      USERSERVICE_DB_HOST: db
      USERSERVICE_DB_NAME: trip
      USERSERVICE_DB_USER: tripservice
      USERSERVICE_DB_PASSWORD: tripservice
    restart: always
  tripbuilderservice:
    container_name: tripBuilderService
    build:
      context: ./backend/services/tripBuilderService
      dockerfile: Dockerfile.dev
    # ports:
    #   - 5000:5000
    volumes:
      - ./backend:/app
    environment:
      USERSERVICE_PORT: 80
      USERSERVICE_SECRET: gf37d2c!_edezb2
      USERSERVICE_DB_HOST: db
      USERSERVICE_DB_NAME: trip
      USERSERVICE_DB_USER: tripservice
      USERSERVICE_DB_PASSWORD: tripservice
    restart: always
  tripbuilderservice2:
    container_name: tripBuilderService_2
    build:
      context: ./backend/services/tripBuilderService
      dockerfile: Dockerfile.dev
    # ports:
    #   - 5000:5000
    volumes:
      - ./backend:/app
    environment:
      USERSERVICE_PORT: 80
      USERSERVICE_SECRET: gf37d2c!_edezb2
      USERSERVICE_DB_HOST: db
      USERSERVICE_DB_NAME: trip
      USERSERVICE_DB_USER: tripservice
      USERSERVICE_DB_PASSWORD: tripservice
    restart: always
  db:
    image: postgres
    restart: always
    volumes:
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    environment:
      POSTGRES_PASSWORD: rootpassword
    ports:
      - 5432:5432
  adminer:
    image: adminer
    restart: always
    ports:
      - 8081:8080
  ### nats broker cluster
  nats1:
    container_name: nats1
    image: nats
    entrypoint: /nats-server
    command: --server_name N1 --cluster_name JSC --js --sd /data --cluster nats://0.0.0.0:4245 --routes nats://nats2:4245,nats://nats3:4245 -p 4222
    ports:
      - 4222:4222

  nats2:
    container_name: nats2
    image: nats
    entrypoint: /nats-server
    command: --server_name N2 --cluster_name JSC --js --sd /data --cluster nats://0.0.0.0:4245 --routes nats://nats1:4245,nats://nats3:4245 -p 4222
    ports:
      - 4223:4222

  nats3:
    container_name: nats3
    image: nats
    entrypoint: /nats-server
    command: --server_name N3 --cluster_name JSC --js --sd /data --cluster nats://0.0.0.0:4245 --routes nats://nats1:4245,nats://nats2:4245 -p 4222
    ports:
      - 4224:4222
