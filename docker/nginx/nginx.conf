# Set the worker processes based on your system's CPU cores
worker_processes auto;

# Set the events block
events {
    worker_connections 1024;
}

# Set the HTTP server block
http {
    # Set the MIME types
    include       mime.types;
    default_type  application/octet-stream;

    # Set the logging configuration
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;
    error_log   /var/log/nginx/error.log;

    map $http_upgrade $connection_upgrade {
        default upgrade;
        ''      close;
    }

    # Set the reverse proxy configuration
    server {
        listen 8080;
        server_name localhost;

        # Redirect requests with /api/* to the backend
        location /userservice/ {
            rewrite ^/userservice(/.*)$ $1 break;
            proxy_pass http://userservice:80;
        }

        location /tripservice/api/swagger/ {
            # Directly forward requests to Swagger without authentication
            rewrite ^/tripservice(/api/swagger/.*)$ $1 break;
            proxy_pass http://tripservice:80;
        }

        location /tripservice/ {

            # Define the authentication endpoint
            auth_request /userservice/api/auth;

            # Capture the "X-Auth-User-Claims" header value from the authentication response
            auth_request_set $user_claims $upstream_http_x_auth_user_claims;

            # Pass the captured "X-Auth-User-Claims" header to the backend service
            proxy_set_header X-Auth-User-Claims $user_claims;

            # Specify the action to take on a successful authentication (HTTP 200 response from auth server)
            auth_request_set $auth_status $upstream_status;

            rewrite ^/tripservice(/.*)$ $1 break;
            proxy_pass http://tripservice:80;
        }

        # Define the location to handle 401 errors
        error_page 401 /401.json;
        location = /401.json {
            add_header Content-Type application/json;
            return 401 '{"code": 401, "message": "Unauthorized"}';
        }


        # # Redirect all other requests to the frontend
        # location / {
        #     proxy_pass http://client:3000;
        #     proxy_http_version 1.1;
        #     proxy_set_header Upgrade $http_upgrade;
        #     proxy_set_header Connection $connection_upgrade;
        # }
    }
}
